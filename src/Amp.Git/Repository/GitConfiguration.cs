using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Amp.Buckets;
using Amp.Buckets.Git;

namespace Amp.Git.Repository
{
    public class GitConfiguration
    {
        protected GitRepository Repository { get; }
        string _gitDir;
        bool _loaded;
        readonly Dictionary<(string, string?, string), string> _config = new Dictionary<(string, string?, string), string>();

        public GitConfiguration(GitRepository gitRepository, string gitDir)
        {
            Repository = gitRepository;
            _gitDir = gitDir;
        }

        internal async ValueTask LoadAsync()
        {
            if (_loaded) return;

            using var b = FileBucket.OpenRead(Path.Combine(_gitDir, "config"));
            using var cr = new GitConfigurationReaderBucket(b);

            while (await cr.ReadConfigItem() is GitConfigurationItem item)
            {
                _config[(item.Group, item.SubGroup, item.Key)] = item.Value ?? "\xFF";
            }
            _loaded = true;
        }

        internal IEnumerable<(string, string)> GetGroup(string group, string? subGroup)
        {
            foreach(var v in _config)
            {
                var (g, s, k) = v.Key;

                if (string.Equals(group, g, StringComparison.OrdinalIgnoreCase) && subGroup == s)
                    yield return (k, v.Value);
            }
        }

        public async ValueTask<int> GetIntAsync(string group, string key, int defaultValue)
        {
            await LoadAsync();

            if (_config.TryGetValue((group, null, key), out var vResult)
                && int.TryParse(vResult, out var r))
            {
                return r;
            }            
            else
                return defaultValue;
        }

        internal int GetInt(string group, string key, int defaultValue)
        {
            return GetIntAsync(group, key, defaultValue).Result;
        }

        public async ValueTask<bool> GetBoolAsync(string group, string key, bool defaultValue)
        {
            await LoadAsync();

            if (_config.TryGetValue((group, null, key), out var vResult))
            {
                // As generated by 'git init'
                if (string.Equals(vResult, "true", StringComparison.OrdinalIgnoreCase))
                    return true;
                else if (string.Equals(vResult, "false", StringComparison.OrdinalIgnoreCase))
                    return false;

                // The simple no value cases
                else if (vResult == "\xFF" || vResult is null)
                    return true;
                else if (vResult != null && vResult.Length == 0)
                    return false;

                // And other documented ok
                else if (string.Equals(vResult, "yes", StringComparison.OrdinalIgnoreCase))
                    return true;
                else if (string.Equals(vResult, "on", StringComparison.OrdinalIgnoreCase))
                    return true;
                else if (string.Equals(vResult, "1", StringComparison.OrdinalIgnoreCase))
                    return true;
                else if (string.Equals(vResult, "\xFF", StringComparison.OrdinalIgnoreCase))
                    return true;
                else if (string.Equals(vResult, "no", StringComparison.OrdinalIgnoreCase))
                    return false;
                else if (string.Equals(vResult, "off", StringComparison.OrdinalIgnoreCase))
                    return false;
                
                else if (string.Equals(vResult, "0", StringComparison.OrdinalIgnoreCase))
                    return false;

                return defaultValue;
            }
            else
                return defaultValue;
        }

        public bool GetBool(string group, string key, bool v3)
        {
            return GetBoolAsync(group, key, v3).Result;
        }
    }
}
