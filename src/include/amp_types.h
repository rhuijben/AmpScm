#pragma once

#include <apr_errno.h>
#include <apr_file_io.h>


#define AMP_DLL(type) type
#define AMP_DEPRECATED

#ifdef __cplusplus
extern "C" {
#endif

	typedef char amp_boolean_t;
	typedef apr_size_t amp_size_t;

	typedef struct amp_error_t
	{
		/** APR error value; possibly an AMP_ custom error code (see
		 * `AMP_error_codes.h' for a full listing).
		 */
		apr_status_t apr_err;

		/** Details from the producer of error.
		 *
		 * Note that if this error was generated by Subversion's API, you'll
		 * probably want to use AMP_err_best_message() to get a single
		 * descriptive string for this error chain (see the @a child member)
		 * or AMP_handle_error2() to print the error chain in full.  This is
		 * because Subversion's API functions sometimes add many links to
		 * the error chain that lack details (used only to produce virtual
		 * stack traces).  (Use AMP_error_purge_tracing() to remove those
		 * trace-only links from the error chain.)
		 */
		const char* message;

		/** Pointer to the error we "wrap" (may be @c NULL).  Via this
		 * member, individual error object can be strung together into an
		 * "error chain".
		 */
		struct amp_error_t* child;

		/** The pool in which this error object is allocated.  (If
		 * Subversion's APIs are used to manage error chains, then this pool
		 * will contain the whole error chain of which this object is a
		 * member.) */
		apr_pool_t* pool;

		/** Source file where the error originated (iff @c AMP_DEBUG;
		 * undefined otherwise).
		 */
		const char* file;

		/** Source line where the error originated (iff @c AMP_DEBUG;
		 * undefined otherwise).
		 */
		long line;

	} amp_error_t;


	typedef struct amp_bucket_t
	{
	} amp_bucket_t;


#ifdef __cplusplus
}
#endif

#include "amp_error.h"
